{"name":"CoreDataEnvirSample","tagline":"A CoreData Envirement wrapper, use CoreData in convient way. It has been used in my works.","body":"CoreDataEnvir (since 2011-05-25) latest version 0.4\r\n=============\r\n\r\nCoreDataEnvir is a CoreData wrapper which use CoreData in convient way and keep safe in multithread programming. You can use it concurrenctlyï¼Œrun seperate CoreDataEnvir instance on one thread.\r\n\r\n## First step:\r\n\r\nRegister your data base file name\r\n\r\n```\r\n\t[CoreDataEnvir registDatabaseFileName:@\"db.sqlite\"];\r\n```\r\n\r\nRegister your model file name(no file extension name)\r\n\r\n```\r\n\t[CoreDataEnvir registModelFileName:@\"SampleModel\"];\r\n```\r\n\r\n## Simple data base access:\r\n\r\nLet's assumption the `Book` class is a model which represent a book object in your reading app. It has some field are `name`, `author` ... etc.\r\n\r\nThere is an author \"John Stevens Cabot Abbott\" written a book named \"Napoleon Bonnaparte\".\r\n\r\n### Add new record\r\n\r\n```\r\n\r\n[Book insertItemWithFillingBlock:^(id item) {\r\n\titem.name = @\"CoreData tutorial\";\r\n\titem.author = @\"Headwindx\";\r\n}];\r\n\r\n```\r\n\r\n### Fetch lots of records\r\n\r\n```\r\n//Find all books of John Stevens Cabot Abbott.\r\nNSArray *books= [Feed itemsWithFormat:@\"author = %@\",  @\"John Stevens Cabot Abbott\"];\r\n\r\n```\r\n\r\n### Fetch one record\r\n\r\n```\r\n//Find one book model object.\r\nBook *book = [Book lastItemWithFormat:@\"name = %@ && author = %@\", @\"Napoleon Bonnaparte\", @\"John Stevens Cabot Abbott\"];\r\n\r\n```\r\n\r\n### Delete one record\r\n\r\n```\r\n[CoreDataEnvir asyncMainInBlock:^(CoreDataEnvir *db) {\r\n\t\t[db deleteDataItem:book];\r\n}];\r\n\r\n```\r\n\r\n### Delete records\r\n\r\n```\r\n[CoreDataEnvir asyncMainInBlock:^(CoreDataEnvir *db) {\r\n\t\t[db deleteDataItemSet:books];\r\n}];\r\n```\r\n\r\n## Concurrenct programming:\r\n\r\n### On main thread\r\n\r\nYou can do some lightweight operation on main thread. All of above operation must runs on main thread by default or it will raise an exception by `CoreDataEnvir`. So you should be carefully.\r\n\r\n#### You also can explicit use on main thread\r\n\r\nIt makes you feel more safe :-)\r\n\r\n```\r\n[CoreDataEnvir asyncMainInBlock:^(CoreDataEnvir *db) {\r\n\t[Book insertItemWithFillingBlock:^(id item) {\r\n\t\titem.name = @\"CoreData tutorial\";\r\n\t\titem.author = @\"Headwindx\";\r\n\t}];\r\n}];\r\n```\r\n\r\n### On background thread\r\n\r\nIt's already prepared a background GCD queue for you in `CoreDataEnvir`.\r\n\r\nThe block `asyncBackgroundInBlock` will save memory cache to db file after `void(^)(CoreDataEnvir *db)` works finished.\r\n\r\nYou don't need to use `[db saveDataBase];` like older version.\r\n\r\n```\r\n\r\n[CoreDataEnvir asyncBackgroundInBlock:^(CoreDataEnvir *db) {\r\n\t[Book insertItemOnBackgroundWithFillingBlock:^(id item) {\r\n\t\titem.name = @\"CoreData tutorial\";\r\n\t\titem.author = @\"Headwindx\";\r\n\t}];\r\n}];\r\n\r\n```\r\n\r\nIt becomes more conveniently on concurrenct programming.\r\n\r\n### Convenient methods\r\n\r\nMust run on main queue:\r\n\r\n\r\n* `+ (void)asyncMainInBlock:(void(^)(CoreDataEnvir *db))CoreDataBlock;`\r\n* `+ (id)insertItemWithFillingBlock:(void(^)(id item))fillingBlock;`\r\n* `+ (NSArray *)itemsWithFormat:(NSString *)fmt,...;`\r\n...\r\n\r\nMust run on background queue, you can use these APIs and some methods name within `Background`:\r\n\r\n* `+ (void)asyncBackgroundInBlock:(void(^)(CoreDataEnvir *db))CoreDataBlock;`\r\n* `+ (id)insertItemOnBackgroundWithFillingBlock:(void(^)(id item))fillingBlock;`\r\n* `+ (NSArray *)itemsOnBackgroundWithFormat:(NSString *)fmt,...;`\r\n...\r\n\r\nOr you wanna run some operation in your own dispatch queue, you can choose this APIs:\r\n\r\n* `+ (CoreDataEnvir *)createInstance;` you'd better hold this instance for future.\r\n* `- (void)asyncInBlock:(void(^)(CoreDataEnvir *db))CoreDataBlock;`\r\n\r\n## If your are newcomer to CoreData, please obey the rules below:\r\n\r\nIf you wanna keep you NSManagedObject objects, you shouldn't release you CoreDataEnvir object or it will be fault. So if you operate data base in multiple threads, make sure your NSManagedObject object reference fetched from [CoreDataEnvir mainInstance] or [CoreDataEnvir backgroundInstance] which never be released until application exist and it's enough for usual.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}